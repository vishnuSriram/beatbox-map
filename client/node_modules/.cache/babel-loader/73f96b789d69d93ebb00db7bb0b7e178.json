{"ast":null,"code":"'use strict';\n\nclass Result {\n  constructor(types, arrayMode) {\n    this._types = types;\n    this._arrayMode = arrayMode;\n    this.command = undefined;\n    this.rowCount = undefined;\n    this.fields = [];\n    this.rows = [];\n  }\n\n  consumeCommand(pq) {\n    this.command = pq.cmdStatus().split(' ')[0];\n    this.rowCount = parseInt(pq.cmdTuples(), 10);\n  }\n\n  consumeFields(pq) {\n    const nfields = pq.nfields();\n\n    for (var x = 0; x < nfields; x++) {\n      this.fields.push({\n        name: pq.fname(x),\n        dataTypeID: pq.ftype(x)\n      });\n    }\n  }\n\n  consumeRows(pq) {\n    const tupleCount = pq.ntuples();\n\n    for (var i = 0; i < tupleCount; i++) {\n      const row = this._arrayMode ? this.consumeRowAsArray(pq, i) : this.consumeRowAsObject(pq, i);\n      this.rows.push(row);\n    }\n  }\n\n  consumeRowAsObject(pq, rowIndex) {\n    const row = {};\n\n    for (var j = 0; j < this.fields.length; j++) {\n      const value = this.readValue(pq, rowIndex, j);\n      row[this.fields[j].name] = value;\n    }\n\n    return row;\n  }\n\n  consumeRowAsArray(pq, rowIndex) {\n    const row = [];\n\n    for (var j = 0; j < this.fields.length; j++) {\n      const value = this.readValue(pq, rowIndex, j);\n      row.push(value);\n    }\n\n    return row;\n  }\n\n  readValue(pq, rowIndex, colIndex) {\n    var rawValue = pq.getvalue(rowIndex, colIndex);\n\n    if (rawValue === '') {\n      if (pq.getisnull(rowIndex, colIndex)) {\n        return null;\n      }\n    }\n\n    const dataTypeId = this.fields[colIndex].dataTypeID;\n    return this._types.getTypeParser(dataTypeId)(rawValue);\n  }\n\n}\n\nfunction buildResult(pq, types, arrayMode) {\n  const result = new Result(types, arrayMode);\n  result.consumeCommand(pq);\n  result.consumeFields(pq);\n  result.consumeRows(pq);\n  return result;\n}\n\nmodule.exports = buildResult;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":";\n\n(function (exports) {\n  // export the class if we are in a Node-like system.\n  if (typeof module === 'object' && module.exports === exports) exports = module.exports = SemVer; // The debug function is excluded entirely from the minified version.\n  // Note: this is the semver.org version of the spec that it implements\n  // Not necessarily the package version of this code.\n\n  exports.SEMVER_SPEC_VERSION = '2.0.0';\n  var MAX_LENGTH = 256;\n  var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991; // The actual regexps go on exports.re\n\n  var re = exports.re = [];\n  var src = exports.src = [];\n  var R = 0; // The following Regular Expressions can be used for tokenizing,\n  // validating, and parsing SemVer version strings.\n  // ## Numeric Identifier\n  // A single `0`, or a non-zero digit followed by zero or more digits.\n\n  var NUMERICIDENTIFIER = R++;\n  src[NUMERICIDENTIFIER] = '0|[1-9]\\\\d*';\n  var NUMERICIDENTIFIERLOOSE = R++;\n  src[NUMERICIDENTIFIERLOOSE] = '[0-9]+'; // ## Non-numeric Identifier\n  // Zero or more digits, followed by a letter or hyphen, and then zero or\n  // more letters, digits, or hyphens.\n\n  var NONNUMERICIDENTIFIER = R++;\n  src[NONNUMERICIDENTIFIER] = '\\\\d*[a-zA-Z-][a-zA-Z0-9-]*'; // ## Main Version\n  // Three dot-separated numeric identifiers.\n\n  var MAINVERSION = R++;\n  src[MAINVERSION] = '(' + src[NUMERICIDENTIFIER] + ')\\\\.' + '(' + src[NUMERICIDENTIFIER] + ')\\\\.' + '(' + src[NUMERICIDENTIFIER] + ')';\n  var MAINVERSIONLOOSE = R++;\n  src[MAINVERSIONLOOSE] = '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\\\.' + '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\\\.' + '(' + src[NUMERICIDENTIFIERLOOSE] + ')'; // ## Pre-release Version Identifier\n  // A numeric identifier, or a non-numeric identifier.\n\n  var PRERELEASEIDENTIFIER = R++;\n  src[PRERELEASEIDENTIFIER] = '(?:' + src[NUMERICIDENTIFIER] + '|' + src[NONNUMERICIDENTIFIER] + ')';\n  var PRERELEASEIDENTIFIERLOOSE = R++;\n  src[PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[NUMERICIDENTIFIERLOOSE] + '|' + src[NONNUMERICIDENTIFIER] + ')'; // ## Pre-release Version\n  // Hyphen, followed by one or more dot-separated pre-release version\n  // identifiers.\n\n  var PRERELEASE = R++;\n  src[PRERELEASE] = '(?:-(' + src[PRERELEASEIDENTIFIER] + '(?:\\\\.' + src[PRERELEASEIDENTIFIER] + ')*))';\n  var PRERELEASELOOSE = R++;\n  src[PRERELEASELOOSE] = '(?:-?(' + src[PRERELEASEIDENTIFIERLOOSE] + '(?:\\\\.' + src[PRERELEASEIDENTIFIERLOOSE] + ')*))'; // ## Build Metadata Identifier\n  // Any combination of digits, letters, or hyphens.\n\n  var BUILDIDENTIFIER = R++;\n  src[BUILDIDENTIFIER] = '[0-9A-Za-z-]+'; // ## Build Metadata\n  // Plus sign, followed by one or more period-separated build metadata\n  // identifiers.\n\n  var BUILD = R++;\n  src[BUILD] = '(?:\\\\+(' + src[BUILDIDENTIFIER] + '(?:\\\\.' + src[BUILDIDENTIFIER] + ')*))'; // ## Full Version String\n  // A main version, followed optionally by a pre-release version and\n  // build metadata.\n  // Note that the only major, minor, patch, and pre-release sections of\n  // the version string are capturing groups.  The build metadata is not a\n  // capturing group, because it should not ever be used in version\n  // comparison.\n\n  var FULL = R++;\n  var FULLPLAIN = 'v?' + src[MAINVERSION] + src[PRERELEASE] + '?' + src[BUILD] + '?';\n  src[FULL] = '^' + FULLPLAIN + '$'; // like full, but allows v1.2.3 and =1.2.3, which people do sometimes.\n  // also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty\n  // common in the npm registry.\n\n  var LOOSEPLAIN = '[v=\\\\s]*' + src[MAINVERSIONLOOSE] + src[PRERELEASELOOSE] + '?' + src[BUILD] + '?';\n  var LOOSE = R++;\n  src[LOOSE] = '^' + LOOSEPLAIN + '$';\n  var GTLT = R++;\n  src[GTLT] = '((?:<|>)?=?)'; // Something like \"2.*\" or \"1.2.x\".\n  // Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"\n  // Only the first item is strictly required.\n\n  var XRANGEIDENTIFIERLOOSE = R++;\n  src[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + '|x|X|\\\\*';\n  var XRANGEIDENTIFIER = R++;\n  src[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + '|x|X|\\\\*';\n  var XRANGEPLAIN = R++;\n  src[XRANGEPLAIN] = '[v=\\\\s]*(' + src[XRANGEIDENTIFIER] + ')' + '(?:\\\\.(' + src[XRANGEIDENTIFIER] + ')' + '(?:\\\\.(' + src[XRANGEIDENTIFIER] + ')' + '(?:' + src[PRERELEASE] + ')?' + src[BUILD] + '?' + ')?)?';\n  var XRANGEPLAINLOOSE = R++;\n  src[XRANGEPLAINLOOSE] = '[v=\\\\s]*(' + src[XRANGEIDENTIFIERLOOSE] + ')' + '(?:\\\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' + '(?:\\\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' + '(?:' + src[PRERELEASELOOSE] + ')?' + src[BUILD] + '?' + ')?)?';\n  var XRANGE = R++;\n  src[XRANGE] = '^' + src[GTLT] + '\\\\s*' + src[XRANGEPLAIN] + '$';\n  var XRANGELOOSE = R++;\n  src[XRANGELOOSE] = '^' + src[GTLT] + '\\\\s*' + src[XRANGEPLAINLOOSE] + '$'; // Tilde ranges.\n  // Meaning is \"reasonably at or greater than\"\n\n  var LONETILDE = R++;\n  src[LONETILDE] = '(?:~>?)';\n  var TILDETRIM = R++;\n  src[TILDETRIM] = '(\\\\s*)' + src[LONETILDE] + '\\\\s+';\n  re[TILDETRIM] = new RegExp(src[TILDETRIM], 'g');\n  var tildeTrimReplace = '$1~';\n  var TILDE = R++;\n  src[TILDE] = '^' + src[LONETILDE] + src[XRANGEPLAIN] + '$';\n  var TILDELOOSE = R++;\n  src[TILDELOOSE] = '^' + src[LONETILDE] + src[XRANGEPLAINLOOSE] + '$'; // Caret ranges.\n  // Meaning is \"at least and backwards compatible with\"\n\n  var LONECARET = R++;\n  src[LONECARET] = '(?:\\\\^)';\n  var CARETTRIM = R++;\n  src[CARETTRIM] = '(\\\\s*)' + src[LONECARET] + '\\\\s+';\n  re[CARETTRIM] = new RegExp(src[CARETTRIM], 'g');\n  var caretTrimReplace = '$1^';\n  var CARET = R++;\n  src[CARET] = '^' + src[LONECARET] + src[XRANGEPLAIN] + '$';\n  var CARETLOOSE = R++;\n  src[CARETLOOSE] = '^' + src[LONECARET] + src[XRANGEPLAINLOOSE] + '$'; // A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"\n\n  var COMPARATORLOOSE = R++;\n  src[COMPARATORLOOSE] = '^' + src[GTLT] + '\\\\s*(' + LOOSEPLAIN + ')$|^$';\n  var COMPARATOR = R++;\n  src[COMPARATOR] = '^' + src[GTLT] + '\\\\s*(' + FULLPLAIN + ')$|^$'; // An expression to strip any whitespace between the gtlt and the thing\n  // it modifies, so that `> 1.2.3` ==> `>1.2.3`\n\n  var COMPARATORTRIM = R++;\n  src[COMPARATORTRIM] = '(\\\\s*)' + src[GTLT] + '\\\\s*(' + LOOSEPLAIN + '|' + src[XRANGEPLAIN] + ')'; // this one has to use the /g flag\n\n  re[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], 'g');\n  var comparatorTrimReplace = '$1$2$3'; // Something like `1.2.3 - 1.2.4`\n  // Note that these all use the loose form, because they'll be\n  // checked against either the strict or loose comparator form\n  // later.\n\n  var HYPHENRANGE = R++;\n  src[HYPHENRANGE] = '^\\\\s*(' + src[XRANGEPLAIN] + ')' + '\\\\s+-\\\\s+' + '(' + src[XRANGEPLAIN] + ')' + '\\\\s*$';\n  var HYPHENRANGELOOSE = R++;\n  src[HYPHENRANGELOOSE] = '^\\\\s*(' + src[XRANGEPLAINLOOSE] + ')' + '\\\\s+-\\\\s+' + '(' + src[XRANGEPLAINLOOSE] + ')' + '\\\\s*$'; // Star ranges basically just allow anything at all.\n\n  var STAR = R++;\n  src[STAR] = '(<|>)?=?\\\\s*\\\\*'; // Compile to actual regexp objects.\n  // All are flag-free, unless they were created above with a flag.\n\n  for (var i = 0; i < R; i++) {\n    ;\n    if (!re[i]) re[i] = new RegExp(src[i]);\n  }\n\n  exports.parse = parse;\n\n  function parse(version, loose) {\n    if (version.length > MAX_LENGTH) return null;\n    var r = loose ? re[LOOSE] : re[FULL];\n    if (!r.test(version)) return null;\n\n    try {\n      return new SemVer(version, loose);\n    } catch (er) {\n      return null;\n    }\n  }\n\n  exports.valid = valid;\n\n  function valid(version, loose) {\n    var v = parse(version, loose);\n    return v ? v.version : null;\n  }\n\n  exports.clean = clean;\n\n  function clean(version, loose) {\n    var s = parse(version.trim().replace(/^[=v]+/, ''), loose);\n    return s ? s.version : null;\n  }\n\n  exports.SemVer = SemVer;\n\n  function SemVer(version, loose) {\n    if (version instanceof SemVer) {\n      if (version.loose === loose) return version;else version = version.version;\n    } else if (typeof version !== 'string') {\n      throw new TypeError('Invalid Version: ' + version);\n    }\n\n    if (version.length > MAX_LENGTH) throw new TypeError('version is longer than ' + MAX_LENGTH + ' characters');\n    if (!(this instanceof SemVer)) return new SemVer(version, loose);\n    ;\n    this.loose = loose;\n    var m = version.trim().match(loose ? re[LOOSE] : re[FULL]);\n    if (!m) throw new TypeError('Invalid Version: ' + version);\n    this.raw = version; // these are actually numbers\n\n    this.major = +m[1];\n    this.minor = +m[2];\n    this.patch = +m[3];\n    if (this.major > MAX_SAFE_INTEGER || this.major < 0) throw new TypeError('Invalid major version');\n    if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) throw new TypeError('Invalid minor version');\n    if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) throw new TypeError('Invalid patch version'); // numberify any prerelease numeric ids\n\n    if (!m[4]) this.prerelease = [];else this.prerelease = m[4].split('.').map(function (id) {\n      return /^[0-9]+$/.test(id) ? +id : id;\n    });\n    this.build = m[5] ? m[5].split('.') : [];\n    this.format();\n  }\n\n  SemVer.prototype.format = function () {\n    this.version = this.major + '.' + this.minor + '.' + this.patch;\n    if (this.prerelease.length) this.version += '-' + this.prerelease.join('.');\n    return this.version;\n  };\n\n  SemVer.prototype.inspect = function () {\n    return '<SemVer \"' + this + '\">';\n  };\n\n  SemVer.prototype.toString = function () {\n    return this.version;\n  };\n\n  SemVer.prototype.compare = function (other) {\n    ;\n    if (!(other instanceof SemVer)) other = new SemVer(other, this.loose);\n    return this.compareMain(other) || this.comparePre(other);\n  };\n\n  SemVer.prototype.compareMain = function (other) {\n    if (!(other instanceof SemVer)) other = new SemVer(other, this.loose);\n    return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);\n  };\n\n  SemVer.prototype.comparePre = function (other) {\n    if (!(other instanceof SemVer)) other = new SemVer(other, this.loose); // NOT having a prerelease is > having one\n\n    if (this.prerelease.length && !other.prerelease.length) return -1;else if (!this.prerelease.length && other.prerelease.length) return 1;else if (!this.prerelease.length && !other.prerelease.length) return 0;\n    var i = 0;\n\n    do {\n      var a = this.prerelease[i];\n      var b = other.prerelease[i];\n      ;\n      if (a === undefined && b === undefined) return 0;else if (b === undefined) return 1;else if (a === undefined) return -1;else if (a === b) continue;else return compareIdentifiers(a, b);\n    } while (++i);\n  }; // preminor will bump the version up to the next minor release, and immediately\n  // down to pre-release. premajor and prepatch work the same way.\n\n\n  SemVer.prototype.inc = function (release, identifier) {\n    switch (release) {\n      case 'premajor':\n        this.prerelease.length = 0;\n        this.patch = 0;\n        this.minor = 0;\n        this.major++;\n        this.inc('pre', identifier);\n        break;\n\n      case 'preminor':\n        this.prerelease.length = 0;\n        this.patch = 0;\n        this.minor++;\n        this.inc('pre', identifier);\n        break;\n\n      case 'prepatch':\n        // If this is already a prerelease, it will bump to the next version\n        // drop any prereleases that might already exist, since they are not\n        // relevant at this point.\n        this.prerelease.length = 0;\n        this.inc('patch', identifier);\n        this.inc('pre', identifier);\n        break;\n      // If the input is a non-prerelease version, this acts the same as\n      // prepatch.\n\n      case 'prerelease':\n        if (this.prerelease.length === 0) this.inc('patch', identifier);\n        this.inc('pre', identifier);\n        break;\n\n      case 'major':\n        // If this is a pre-major version, bump up to the same major version.\n        // Otherwise increment major.\n        // 1.0.0-5 bumps to 1.0.0\n        // 1.1.0 bumps to 2.0.0\n        if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) this.major++;\n        this.minor = 0;\n        this.patch = 0;\n        this.prerelease = [];\n        break;\n\n      case 'minor':\n        // If this is a pre-minor version, bump up to the same minor version.\n        // Otherwise increment minor.\n        // 1.2.0-5 bumps to 1.2.0\n        // 1.2.1 bumps to 1.3.0\n        if (this.patch !== 0 || this.prerelease.length === 0) this.minor++;\n        this.patch = 0;\n        this.prerelease = [];\n        break;\n\n      case 'patch':\n        // If this is not a pre-release version, it will increment the patch.\n        // If it is a pre-release it will bump up to the same patch version.\n        // 1.2.0-5 patches to 1.2.0\n        // 1.2.0 patches to 1.2.1\n        if (this.prerelease.length === 0) this.patch++;\n        this.prerelease = [];\n        break;\n      // This probably shouldn't be used publicly.\n      // 1.0.0 \"pre\" would become 1.0.0-0 which is the wrong direction.\n\n      case 'pre':\n        if (this.prerelease.length === 0) this.prerelease = [0];else {\n          var i = this.prerelease.length;\n\n          while (--i >= 0) {\n            if (typeof this.prerelease[i] === 'number') {\n              this.prerelease[i]++;\n              i = -2;\n            }\n          }\n\n          if (i === -1) // didn't increment anything\n            this.prerelease.push(0);\n        }\n\n        if (identifier) {\n          // 1.2.0-beta.1 bumps to 1.2.0-beta.2,\n          // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0\n          if (this.prerelease[0] === identifier) {\n            if (isNaN(this.prerelease[1])) this.prerelease = [identifier, 0];\n          } else this.prerelease = [identifier, 0];\n        }\n\n        break;\n\n      default:\n        throw new Error('invalid increment argument: ' + release);\n    }\n\n    this.format();\n    return this;\n  };\n\n  exports.inc = inc;\n\n  function inc(version, release, loose, identifier) {\n    if (typeof loose === 'string') {\n      identifier = loose;\n      loose = undefined;\n    }\n\n    try {\n      return new SemVer(version, loose).inc(release, identifier).version;\n    } catch (er) {\n      return null;\n    }\n  }\n\n  exports.diff = diff;\n\n  function diff(version1, version2) {\n    if (eq(version1, version2)) {\n      return null;\n    } else {\n      var v1 = parse(version1);\n      var v2 = parse(version2);\n\n      if (v1.prerelease.length || v2.prerelease.length) {\n        for (var key in v1) {\n          if (key === 'major' || key === 'minor' || key === 'patch') {\n            if (v1[key] !== v2[key]) {\n              return 'pre' + key;\n            }\n          }\n        }\n\n        return 'prerelease';\n      }\n\n      for (var key in v1) {\n        if (key === 'major' || key === 'minor' || key === 'patch') {\n          if (v1[key] !== v2[key]) {\n            return key;\n          }\n        }\n      }\n    }\n  }\n\n  exports.compareIdentifiers = compareIdentifiers;\n  var numeric = /^[0-9]+$/;\n\n  function compareIdentifiers(a, b) {\n    var anum = numeric.test(a);\n    var bnum = numeric.test(b);\n\n    if (anum && bnum) {\n      a = +a;\n      b = +b;\n    }\n\n    return anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : a > b ? 1 : 0;\n  }\n\n  exports.rcompareIdentifiers = rcompareIdentifiers;\n\n  function rcompareIdentifiers(a, b) {\n    return compareIdentifiers(b, a);\n  }\n\n  exports.major = major;\n\n  function major(a, loose) {\n    return new SemVer(a, loose).major;\n  }\n\n  exports.minor = minor;\n\n  function minor(a, loose) {\n    return new SemVer(a, loose).minor;\n  }\n\n  exports.patch = patch;\n\n  function patch(a, loose) {\n    return new SemVer(a, loose).patch;\n  }\n\n  exports.compare = compare;\n\n  function compare(a, b, loose) {\n    return new SemVer(a, loose).compare(b);\n  }\n\n  exports.compareLoose = compareLoose;\n\n  function compareLoose(a, b) {\n    return compare(a, b, true);\n  }\n\n  exports.rcompare = rcompare;\n\n  function rcompare(a, b, loose) {\n    return compare(b, a, loose);\n  }\n\n  exports.sort = sort;\n\n  function sort(list, loose) {\n    return list.sort(function (a, b) {\n      return exports.compare(a, b, loose);\n    });\n  }\n\n  exports.rsort = rsort;\n\n  function rsort(list, loose) {\n    return list.sort(function (a, b) {\n      return exports.rcompare(a, b, loose);\n    });\n  }\n\n  exports.gt = gt;\n\n  function gt(a, b, loose) {\n    return compare(a, b, loose) > 0;\n  }\n\n  exports.lt = lt;\n\n  function lt(a, b, loose) {\n    return compare(a, b, loose) < 0;\n  }\n\n  exports.eq = eq;\n\n  function eq(a, b, loose) {\n    return compare(a, b, loose) === 0;\n  }\n\n  exports.neq = neq;\n\n  function neq(a, b, loose) {\n    return compare(a, b, loose) !== 0;\n  }\n\n  exports.gte = gte;\n\n  function gte(a, b, loose) {\n    return compare(a, b, loose) >= 0;\n  }\n\n  exports.lte = lte;\n\n  function lte(a, b, loose) {\n    return compare(a, b, loose) <= 0;\n  }\n\n  exports.cmp = cmp;\n\n  function cmp(a, op, b, loose) {\n    var ret;\n\n    switch (op) {\n      case '===':\n        if (typeof a === 'object') a = a.version;\n        if (typeof b === 'object') b = b.version;\n        ret = a === b;\n        break;\n\n      case '!==':\n        if (typeof a === 'object') a = a.version;\n        if (typeof b === 'object') b = b.version;\n        ret = a !== b;\n        break;\n\n      case '':\n      case '=':\n      case '==':\n        ret = eq(a, b, loose);\n        break;\n\n      case '!=':\n        ret = neq(a, b, loose);\n        break;\n\n      case '>':\n        ret = gt(a, b, loose);\n        break;\n\n      case '>=':\n        ret = gte(a, b, loose);\n        break;\n\n      case '<':\n        ret = lt(a, b, loose);\n        break;\n\n      case '<=':\n        ret = lte(a, b, loose);\n        break;\n\n      default:\n        throw new TypeError('Invalid operator: ' + op);\n    }\n\n    return ret;\n  }\n\n  exports.Comparator = Comparator;\n\n  function Comparator(comp, loose) {\n    if (comp instanceof Comparator) {\n      if (comp.loose === loose) return comp;else comp = comp.value;\n    }\n\n    if (!(this instanceof Comparator)) return new Comparator(comp, loose);\n    ;\n    this.loose = loose;\n    this.parse(comp);\n    if (this.semver === ANY) this.value = '';else this.value = this.operator + this.semver.version;\n    ;\n  }\n\n  var ANY = {};\n\n  Comparator.prototype.parse = function (comp) {\n    var r = this.loose ? re[COMPARATORLOOSE] : re[COMPARATOR];\n    var m = comp.match(r);\n    if (!m) throw new TypeError('Invalid comparator: ' + comp);\n    this.operator = m[1];\n    if (this.operator === '=') this.operator = ''; // if it literally is just '>' or '' then allow anything.\n\n    if (!m[2]) this.semver = ANY;else this.semver = new SemVer(m[2], this.loose);\n  };\n\n  Comparator.prototype.inspect = function () {\n    return '<SemVer Comparator \"' + this + '\">';\n  };\n\n  Comparator.prototype.toString = function () {\n    return this.value;\n  };\n\n  Comparator.prototype.test = function (version) {\n    ;\n    if (this.semver === ANY) return true;\n    if (typeof version === 'string') version = new SemVer(version, this.loose);\n    return cmp(version, this.operator, this.semver, this.loose);\n  };\n\n  exports.Range = Range;\n\n  function Range(range, loose) {\n    if (range instanceof Range && range.loose === loose) return range;\n    if (!(this instanceof Range)) return new Range(range, loose);\n    this.loose = loose; // First, split based on boolean or ||\n\n    this.raw = range;\n    this.set = range.split(/\\s*\\|\\|\\s*/).map(function (range) {\n      return this.parseRange(range.trim());\n    }, this).filter(function (c) {\n      // throw out any that are not relevant for whatever reason\n      return c.length;\n    });\n\n    if (!this.set.length) {\n      throw new TypeError('Invalid SemVer Range: ' + range);\n    }\n\n    this.format();\n  }\n\n  Range.prototype.inspect = function () {\n    return '<SemVer Range \"' + this.range + '\">';\n  };\n\n  Range.prototype.format = function () {\n    this.range = this.set.map(function (comps) {\n      return comps.join(' ').trim();\n    }).join('||').trim();\n    return this.range;\n  };\n\n  Range.prototype.toString = function () {\n    return this.range;\n  };\n\n  Range.prototype.parseRange = function (range) {\n    var loose = this.loose;\n    range = range.trim();\n    ; // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`\n\n    var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE];\n    range = range.replace(hr, hyphenReplace);\n    ; // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`\n\n    range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace);\n    ; // `~ 1.2.3` => `~1.2.3`\n\n    range = range.replace(re[TILDETRIM], tildeTrimReplace); // `^ 1.2.3` => `^1.2.3`\n\n    range = range.replace(re[CARETTRIM], caretTrimReplace); // normalize spaces\n\n    range = range.split(/\\s+/).join(' '); // At this point, the range is completely trimmed and\n    // ready to be split into comparators.\n\n    var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR];\n    var set = range.split(' ').map(function (comp) {\n      return parseComparator(comp, loose);\n    }).join(' ').split(/\\s+/);\n\n    if (this.loose) {\n      // in loose mode, throw out any that are not valid comparators\n      set = set.filter(function (comp) {\n        return !!comp.match(compRe);\n      });\n    }\n\n    set = set.map(function (comp) {\n      return new Comparator(comp, loose);\n    });\n    return set;\n  }; // Mostly just for testing and legacy API reasons\n\n\n  exports.toComparators = toComparators;\n\n  function toComparators(range, loose) {\n    return new Range(range, loose).set.map(function (comp) {\n      return comp.map(function (c) {\n        return c.value;\n      }).join(' ').trim().split(' ');\n    });\n  } // comprised of xranges, tildes, stars, and gtlt's at this point.\n  // already replaced the hyphen ranges\n  // turn into a set of JUST comparators.\n\n\n  function parseComparator(comp, loose) {\n    ;\n    comp = replaceCarets(comp, loose);\n    ;\n    comp = replaceTildes(comp, loose);\n    ;\n    comp = replaceXRanges(comp, loose);\n    ;\n    comp = replaceStars(comp, loose);\n    ;\n    return comp;\n  }\n\n  function isX(id) {\n    return !id || id.toLowerCase() === 'x' || id === '*';\n  } // ~, ~> --> * (any, kinda silly)\n  // ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0\n  // ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0\n  // ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0\n  // ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0\n  // ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0\n\n\n  function replaceTildes(comp, loose) {\n    return comp.trim().split(/\\s+/).map(function (comp) {\n      return replaceTilde(comp, loose);\n    }).join(' ');\n  }\n\n  function replaceTilde(comp, loose) {\n    var r = loose ? re[TILDELOOSE] : re[TILDE];\n    return comp.replace(r, function (_, M, m, p, pr) {\n      ;\n      var ret;\n      if (isX(M)) ret = '';else if (isX(m)) ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';else if (isX(p)) // ~1.2 == >=1.2.0- <1.3.0-\n        ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';else if (pr) {\n        ;\n        if (pr.charAt(0) !== '-') pr = '-' + pr;\n        ret = '>=' + M + '.' + m + '.' + p + pr + ' <' + M + '.' + (+m + 1) + '.0';\n      } else // ~1.2.3 == >=1.2.3 <1.3.0\n        ret = '>=' + M + '.' + m + '.' + p + ' <' + M + '.' + (+m + 1) + '.0';\n      ;\n      return ret;\n    });\n  } // ^ --> * (any, kinda silly)\n  // ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0\n  // ^2.0, ^2.0.x --> >=2.0.0 <3.0.0\n  // ^1.2, ^1.2.x --> >=1.2.0 <2.0.0\n  // ^1.2.3 --> >=1.2.3 <2.0.0\n  // ^1.2.0 --> >=1.2.0 <2.0.0\n\n\n  function replaceCarets(comp, loose) {\n    return comp.trim().split(/\\s+/).map(function (comp) {\n      return replaceCaret(comp, loose);\n    }).join(' ');\n  }\n\n  function replaceCaret(comp, loose) {\n    ;\n    var r = loose ? re[CARETLOOSE] : re[CARET];\n    return comp.replace(r, function (_, M, m, p, pr) {\n      ;\n      var ret;\n      if (isX(M)) ret = '';else if (isX(m)) ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';else if (isX(p)) {\n        if (M === '0') ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';else ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0';\n      } else if (pr) {\n        ;\n        if (pr.charAt(0) !== '-') pr = '-' + pr;\n\n        if (M === '0') {\n          if (m === '0') ret = '>=' + M + '.' + m + '.' + p + pr + ' <' + M + '.' + m + '.' + (+p + 1);else ret = '>=' + M + '.' + m + '.' + p + pr + ' <' + M + '.' + (+m + 1) + '.0';\n        } else ret = '>=' + M + '.' + m + '.' + p + pr + ' <' + (+M + 1) + '.0.0';\n      } else {\n        ;\n\n        if (M === '0') {\n          if (m === '0') ret = '>=' + M + '.' + m + '.' + p + ' <' + M + '.' + m + '.' + (+p + 1);else ret = '>=' + M + '.' + m + '.' + p + ' <' + M + '.' + (+m + 1) + '.0';\n        } else ret = '>=' + M + '.' + m + '.' + p + ' <' + (+M + 1) + '.0.0';\n      }\n      ;\n      return ret;\n    });\n  }\n\n  function replaceXRanges(comp, loose) {\n    ;\n    return comp.split(/\\s+/).map(function (comp) {\n      return replaceXRange(comp, loose);\n    }).join(' ');\n  }\n\n  function replaceXRange(comp, loose) {\n    comp = comp.trim();\n    var r = loose ? re[XRANGELOOSE] : re[XRANGE];\n    return comp.replace(r, function (ret, gtlt, M, m, p, pr) {\n      ;\n      var xM = isX(M);\n      var xm = xM || isX(m);\n      var xp = xm || isX(p);\n      var anyX = xp;\n      if (gtlt === '=' && anyX) gtlt = '';\n\n      if (xM) {\n        if (gtlt === '>' || gtlt === '<') {\n          // nothing is allowed\n          ret = '<0.0.0';\n        } else {\n          // nothing is forbidden\n          ret = '*';\n        }\n      } else if (gtlt && anyX) {\n        // replace X with 0\n        if (xm) m = 0;\n        if (xp) p = 0;\n\n        if (gtlt === '>') {\n          // >1 => >=2.0.0\n          // >1.2 => >=1.3.0\n          // >1.2.3 => >= 1.2.4\n          gtlt = '>=';\n\n          if (xm) {\n            M = +M + 1;\n            m = 0;\n            p = 0;\n          } else if (xp) {\n            m = +m + 1;\n            p = 0;\n          }\n        } else if (gtlt === '<=') {\n          // <=0.7.x is actually <0.8.0, since any 0.7.x should\n          // pass.  Similarly, <=7.x is actually <8.0.0, etc.\n          gtlt = '<';\n          if (xm) M = +M + 1;else m = +m + 1;\n        }\n\n        ret = gtlt + M + '.' + m + '.' + p;\n      } else if (xm) {\n        ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';\n      } else if (xp) {\n        ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';\n      }\n\n      ;\n      return ret;\n    });\n  } // Because * is AND-ed with everything else in the comparator,\n  // and '' means \"any version\", just remove the *s entirely.\n\n\n  function replaceStars(comp, loose) {\n    ; // Looseness is ignored here.  star is always as loose as it gets!\n\n    return comp.trim().replace(re[STAR], '');\n  } // This function is passed to string.replace(re[HYPHENRANGE])\n  // M, m, patch, prerelease, build\n  // 1.2 - 3.4.5 => >=1.2.0 <=3.4.5\n  // 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do\n  // 1.2 - 3.4 => >=1.2.0 <3.5.0\n\n\n  function hyphenReplace($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) {\n    if (isX(fM)) from = '';else if (isX(fm)) from = '>=' + fM + '.0.0';else if (isX(fp)) from = '>=' + fM + '.' + fm + '.0';else from = '>=' + from;\n    if (isX(tM)) to = '';else if (isX(tm)) to = '<' + (+tM + 1) + '.0.0';else if (isX(tp)) to = '<' + tM + '.' + (+tm + 1) + '.0';else if (tpr) to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr;else to = '<=' + to;\n    return (from + ' ' + to).trim();\n  } // if ANY of the sets match ALL of its comparators, then pass\n\n\n  Range.prototype.test = function (version) {\n    if (!version) return false;\n    if (typeof version === 'string') version = new SemVer(version, this.loose);\n\n    for (var i = 0; i < this.set.length; i++) {\n      if (testSet(this.set[i], version)) return true;\n    }\n\n    return false;\n  };\n\n  function testSet(set, version) {\n    for (var i = 0; i < set.length; i++) {\n      if (!set[i].test(version)) return false;\n    }\n\n    if (version.prerelease.length) {\n      // Find the set of versions that are allowed to have prereleases\n      // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0\n      // That should allow `1.2.3-pr.2` to pass.\n      // However, `1.2.4-alpha.notready` should NOT be allowed,\n      // even though it's within the range set by the comparators.\n      for (var i = 0; i < set.length; i++) {\n        ;\n        if (set[i].semver === ANY) return true;\n\n        if (set[i].semver.prerelease.length > 0) {\n          var allowed = set[i].semver;\n          if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) return true;\n        }\n      } // Version has a -pre, but it's not one of the ones we like.\n\n\n      return false;\n    }\n\n    return true;\n  }\n\n  exports.satisfies = satisfies;\n\n  function satisfies(version, range, loose) {\n    try {\n      range = new Range(range, loose);\n    } catch (er) {\n      return false;\n    }\n\n    return range.test(version);\n  }\n\n  exports.maxSatisfying = maxSatisfying;\n\n  function maxSatisfying(versions, range, loose) {\n    return versions.filter(function (version) {\n      return satisfies(version, range, loose);\n    }).sort(function (a, b) {\n      return rcompare(a, b, loose);\n    })[0] || null;\n  }\n\n  exports.validRange = validRange;\n\n  function validRange(range, loose) {\n    try {\n      // Return '*' instead of '' so that truthiness works.\n      // This will throw if it's invalid anyway\n      return new Range(range, loose).range || '*';\n    } catch (er) {\n      return null;\n    }\n  } // Determine if version is less than all the versions possible in the range\n\n\n  exports.ltr = ltr;\n\n  function ltr(version, range, loose) {\n    return outside(version, range, '<', loose);\n  } // Determine if version is greater than all the versions possible in the range.\n\n\n  exports.gtr = gtr;\n\n  function gtr(version, range, loose) {\n    return outside(version, range, '>', loose);\n  }\n\n  exports.outside = outside;\n\n  function outside(version, range, hilo, loose) {\n    version = new SemVer(version, loose);\n    range = new Range(range, loose);\n    var gtfn, ltefn, ltfn, comp, ecomp;\n\n    switch (hilo) {\n      case '>':\n        gtfn = gt;\n        ltefn = lte;\n        ltfn = lt;\n        comp = '>';\n        ecomp = '>=';\n        break;\n\n      case '<':\n        gtfn = lt;\n        ltefn = gte;\n        ltfn = gt;\n        comp = '<';\n        ecomp = '<=';\n        break;\n\n      default:\n        throw new TypeError('Must provide a hilo val of \"<\" or \">\"');\n    } // If it satisifes the range it is not outside\n\n\n    if (satisfies(version, range, loose)) {\n      return false;\n    } // From now on, variable terms are as if we're in \"gtr\" mode.\n    // but note that everything is flipped for the \"ltr\" function.\n\n\n    for (var i = 0; i < range.set.length; ++i) {\n      var comparators = range.set[i];\n      var high = null;\n      var low = null;\n      comparators.forEach(function (comparator) {\n        high = high || comparator;\n        low = low || comparator;\n\n        if (gtfn(comparator.semver, high.semver, loose)) {\n          high = comparator;\n        } else if (ltfn(comparator.semver, low.semver, loose)) {\n          low = comparator;\n        }\n      }); // If the edge version comparator has a operator then our version\n      // isn't outside it\n\n      if (high.operator === comp || high.operator === ecomp) {\n        return false;\n      } // If the lowest version comparator has an operator and our version\n      // is less than it then it isn't higher than the range\n\n\n      if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) {\n        return false;\n      } else if (low.operator === ecomp && ltfn(version, low.semver)) {\n        return false;\n      }\n    }\n\n    return true;\n  } // Use the define() function if we're in AMD land\n\n\n  if (typeof define === 'function' && define.amd) define(exports);\n})(typeof exports === 'object' ? exports : typeof define === 'function' && define.amd ? {} : semver = {});","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"const crypto = require('crypto');\n\nfunction startSession(mechanisms) {\n  if (mechanisms.indexOf('SCRAM-SHA-256') === -1) {\n    throw new Error('SASL: Only mechanism SCRAM-SHA-256 is currently supported');\n  }\n\n  const clientNonce = crypto.randomBytes(18).toString('base64');\n  return {\n    mechanism: 'SCRAM-SHA-256',\n    clientNonce,\n    response: 'n,,n=*,r=' + clientNonce,\n    message: 'SASLInitialResponse'\n  };\n}\n\nfunction continueSession(session, password, serverData) {\n  if (session.message !== 'SASLInitialResponse') {\n    throw new Error('SASL: Last message was not SASLInitialResponse');\n  }\n\n  const sv = extractVariablesFromFirstServerMessage(serverData);\n\n  if (!sv.nonce.startsWith(session.clientNonce)) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: server nonce does not start with client nonce');\n  }\n\n  var saltBytes = Buffer.from(sv.salt, 'base64');\n  var saltedPassword = Hi(password, saltBytes, sv.iteration);\n  var clientKey = createHMAC(saltedPassword, 'Client Key');\n  var storedKey = crypto.createHash('sha256').update(clientKey).digest();\n  var clientFirstMessageBare = 'n=*,r=' + session.clientNonce;\n  var serverFirstMessage = 'r=' + sv.nonce + ',s=' + sv.salt + ',i=' + sv.iteration;\n  var clientFinalMessageWithoutProof = 'c=biws,r=' + sv.nonce;\n  var authMessage = clientFirstMessageBare + ',' + serverFirstMessage + ',' + clientFinalMessageWithoutProof;\n  var clientSignature = createHMAC(storedKey, authMessage);\n  var clientProofBytes = xorBuffers(clientKey, clientSignature);\n  var clientProof = clientProofBytes.toString('base64');\n  var serverKey = createHMAC(saltedPassword, 'Server Key');\n  var serverSignatureBytes = createHMAC(serverKey, authMessage);\n  session.message = 'SASLResponse';\n  session.serverSignature = serverSignatureBytes.toString('base64');\n  session.response = clientFinalMessageWithoutProof + ',p=' + clientProof;\n}\n\nfunction finalizeSession(session, serverData) {\n  if (session.message !== 'SASLResponse') {\n    throw new Error('SASL: Last message was not SASLResponse');\n  }\n\n  var serverSignature;\n  String(serverData).split(',').forEach(function (part) {\n    switch (part[0]) {\n      case 'v':\n        serverSignature = part.substr(2);\n        break;\n    }\n  });\n\n  if (serverSignature !== session.serverSignature) {\n    throw new Error('SASL: SCRAM-SERVER-FINAL-MESSAGE: server signature does not match');\n  }\n}\n\nfunction extractVariablesFromFirstServerMessage(data) {\n  var nonce, salt, iteration;\n  String(data).split(',').forEach(function (part) {\n    switch (part[0]) {\n      case 'r':\n        nonce = part.substr(2);\n        break;\n\n      case 's':\n        salt = part.substr(2);\n        break;\n\n      case 'i':\n        iteration = parseInt(part.substr(2), 10);\n        break;\n    }\n  });\n\n  if (!nonce) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: nonce missing');\n  }\n\n  if (!salt) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: salt missing');\n  }\n\n  if (!iteration) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: iteration missing');\n  }\n\n  return {\n    nonce,\n    salt,\n    iteration\n  };\n}\n\nfunction xorBuffers(a, b) {\n  if (!Buffer.isBuffer(a)) a = Buffer.from(a);\n  if (!Buffer.isBuffer(b)) b = Buffer.from(b);\n  var res = [];\n\n  if (a.length > b.length) {\n    for (var i = 0; i < b.length; i++) {\n      res.push(a[i] ^ b[i]);\n    }\n  } else {\n    for (var j = 0; j < a.length; j++) {\n      res.push(a[j] ^ b[j]);\n    }\n  }\n\n  return Buffer.from(res);\n}\n\nfunction createHMAC(key, msg) {\n  return crypto.createHmac('sha256', key).update(msg).digest();\n}\n\nfunction Hi(password, saltBytes, iterations) {\n  var ui1 = createHMAC(password, Buffer.concat([saltBytes, Buffer.from([0, 0, 0, 1])]));\n  var ui = ui1;\n\n  for (var i = 0; i < iterations - 1; i++) {\n    ui1 = createHMAC(password, ui1);\n    ui = xorBuffers(ui, ui1);\n  }\n\n  return ui;\n}\n\nmodule.exports = {\n  startSession,\n  continueSession,\n  finalizeSession\n};","map":null,"metadata":{},"sourceType":"script"}
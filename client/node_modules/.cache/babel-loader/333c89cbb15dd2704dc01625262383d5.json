{"ast":null,"code":"'use strict';\n/**\n * Copyright (c) 2010-2017 Brian Carlson (brian.m.carlson@gmail.com)\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * README.md file in the root directory of this source tree.\n */\n\nvar util = require('util');\n\nvar Client = require('./client');\n\nvar defaults = require('./defaults');\n\nvar Connection = require('./connection');\n\nvar Pool = require('pg-pool');\n\nconst poolFactory = Client => {\n  var BoundPool = function (options) {\n    var config = Object.assign({\n      Client: Client\n    }, options);\n    return new Pool(config);\n  };\n\n  util.inherits(BoundPool, Pool);\n  return BoundPool;\n};\n\nvar PG = function (clientConstructor) {\n  this.defaults = defaults;\n  this.Client = clientConstructor;\n  this.Query = this.Client.Query;\n  this.Pool = poolFactory(this.Client);\n  this._pools = [];\n  this.Connection = Connection;\n  this.types = require('pg-types');\n};\n\nif (typeof process.env.NODE_PG_FORCE_NATIVE !== 'undefined') {\n  module.exports = new PG(require('./native'));\n} else {\n  module.exports = new PG(Client); // lazy require native module...the native module may not have installed\n\n  module.exports.__defineGetter__('native', function () {\n    delete module.exports.native;\n    var native = null;\n\n    try {\n      native = new PG(require('./native'));\n    } catch (err) {\n      if (err.code !== 'MODULE_NOT_FOUND') {\n        throw err;\n      }\n\n      console.error(err.message);\n    }\n\n    module.exports.native = native;\n    return native;\n  });\n}","map":null,"metadata":{},"sourceType":"script"}
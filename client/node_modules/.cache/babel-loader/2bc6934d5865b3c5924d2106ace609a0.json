{"ast":null,"code":"'use strict';\n/**\n * Copyright (c) 2010-2017 Brian Carlson (brian.m.carlson@gmail.com)\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * README.md file in the root directory of this source tree.\n */\n\nmodule.exports = {\n  // database host. defaults to localhost\n  host: 'localhost',\n  // database user's name\n  user: process.platform === 'win32' ? process.env.USERNAME : process.env.USER,\n  // name of database to connect\n  database: process.platform === 'win32' ? process.env.USERNAME : process.env.USER,\n  // database user's password\n  password: null,\n  // a Postgres connection string to be used instead of setting individual connection items\n  // NOTE:  Setting this value will cause it to override any other value (such as database or user) defined\n  // in the defaults object.\n  connectionString: undefined,\n  // database port\n  port: 5432,\n  // number of rows to return at a time from a prepared statement's\n  // portal. 0 will return all rows at once\n  rows: 0,\n  // binary result mode\n  binary: false,\n  // Connection pool options - see https://github.com/brianc/node-pg-pool\n  // number of connections to use in connection pool\n  // 0 will disable connection pooling\n  max: 10,\n  // max milliseconds a client can go unused before it is removed\n  // from the pool and destroyed\n  idleTimeoutMillis: 30000,\n  client_encoding: '',\n  ssl: false,\n  application_name: undefined,\n  fallback_application_name: undefined,\n  parseInputDatesAsUTC: false,\n  // max milliseconds any query using this connection will execute for before timing out in error. false=unlimited\n  statement_timeout: false,\n  // max miliseconds to wait for query to complete (client side)\n  query_timeout: false,\n  connect_timeout: 0,\n  keepalives: 1,\n  keepalives_idle: 0\n};\n\nvar pgTypes = require('pg-types'); // save default parsers\n\n\nvar parseBigInteger = pgTypes.getTypeParser(20, 'text');\nvar parseBigIntegerArray = pgTypes.getTypeParser(1016, 'text'); // parse int8 so you can get your count values as actual numbers\n\nmodule.exports.__defineSetter__('parseInt8', function (val) {\n  pgTypes.setTypeParser(20, 'text', val ? pgTypes.getTypeParser(23, 'text') : parseBigInteger);\n  pgTypes.setTypeParser(1016, 'text', val ? pgTypes.getTypeParser(1007, 'text') : parseBigIntegerArray);\n});","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n/**\n * Copyright (c) 2010-2017 Brian Carlson (brian.m.carlson@gmail.com)\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * README.md file in the root directory of this source tree.\n */\n\nvar types = require('pg-types'); // result object returned from query\n// in the 'end' event and also\n// passed as second argument to provided callback\n\n\nvar Result = function (rowMode, types) {\n  this.command = null;\n  this.rowCount = null;\n  this.oid = null;\n  this.rows = [];\n  this.fields = [];\n  this._parsers = [];\n  this._types = types;\n  this.RowCtor = null;\n  this.rowAsArray = rowMode === 'array';\n\n  if (this.rowAsArray) {\n    this.parseRow = this._parseRowAsArray;\n  }\n};\n\nvar matchRegexp = /^([A-Za-z]+)(?: (\\d+))?(?: (\\d+))?/; // adds a command complete message\n\nResult.prototype.addCommandComplete = function (msg) {\n  var match;\n\n  if (msg.text) {\n    // pure javascript\n    match = matchRegexp.exec(msg.text);\n  } else {\n    // native bindings\n    match = matchRegexp.exec(msg.command);\n  }\n\n  if (match) {\n    this.command = match[1];\n\n    if (match[3]) {\n      // COMMMAND OID ROWS\n      this.oid = parseInt(match[2], 10);\n      this.rowCount = parseInt(match[3], 10);\n    } else if (match[2]) {\n      // COMMAND ROWS\n      this.rowCount = parseInt(match[2], 10);\n    }\n  }\n};\n\nResult.prototype._parseRowAsArray = function (rowData) {\n  var row = [];\n\n  for (var i = 0, len = rowData.length; i < len; i++) {\n    var rawValue = rowData[i];\n\n    if (rawValue !== null) {\n      row.push(this._parsers[i](rawValue));\n    } else {\n      row.push(null);\n    }\n  }\n\n  return row;\n};\n\nResult.prototype.parseRow = function (rowData) {\n  var row = {};\n\n  for (var i = 0, len = rowData.length; i < len; i++) {\n    var rawValue = rowData[i];\n    var field = this.fields[i].name;\n\n    if (rawValue !== null) {\n      row[field] = this._parsers[i](rawValue);\n    } else {\n      row[field] = null;\n    }\n  }\n\n  return row;\n};\n\nResult.prototype.addRow = function (row) {\n  this.rows.push(row);\n};\n\nResult.prototype.addFields = function (fieldDescriptions) {\n  // clears field definitions\n  // multiple query statements in 1 action can result in multiple sets\n  // of rowDescriptions...eg: 'select NOW(); select 1::int;'\n  // you need to reset the fields\n  if (this.fields.length) {\n    this.fields = [];\n    this._parsers = [];\n  }\n\n  for (var i = 0; i < fieldDescriptions.length; i++) {\n    var desc = fieldDescriptions[i];\n    this.fields.push(desc);\n    var parser = (this._types || types).getTypeParser(desc.dataTypeID, desc.format || 'text');\n\n    this._parsers.push(parser);\n  }\n};\n\nmodule.exports = Result;","map":null,"metadata":{},"sourceType":"script"}
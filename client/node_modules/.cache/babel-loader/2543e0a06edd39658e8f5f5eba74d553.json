{"ast":null,"code":"var PQ = module.exports = require('bindings')('addon.node').PQ; //print out the include dir\n//if you want to include this in a binding.gyp file\n\n\nif (!module.parent) {\n  var path = require('path');\n\n  console.log(path.normalize(__dirname + '/src'));\n}\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar assert = require('assert');\n\nfor (var key in EventEmitter.prototype) {\n  PQ.prototype[key] = EventEmitter.prototype[key];\n} //SYNC connects to the server\n//throws an exception in the event of a connection error\n\n\nPQ.prototype.connectSync = function (paramString) {\n  this.connected = true;\n\n  if (!paramString) {\n    paramString = '';\n  }\n\n  var connected = this.$connectSync(paramString);\n\n  if (!connected) {\n    var err = new Error(this.errorMessage());\n    this.finish();\n    throw err;\n  }\n}; //connects async using a background thread\n//calls the callback with an error if there was one\n\n\nPQ.prototype.connect = function (paramString, cb) {\n  this.connected = true;\n\n  if (typeof paramString == 'function') {\n    cb = paramString;\n    paramString = '';\n  }\n\n  if (!paramString) {\n    paramString = '';\n  }\n\n  assert(cb, 'Must provide a connection callback');\n\n  if (process.domain) {\n    cb = process.domain.bind(cb);\n  }\n\n  this.$connect(paramString, cb);\n};\n\nPQ.prototype.errorMessage = function () {\n  return this.$getLastErrorMessage();\n}; //returns an int for the fd of the socket\n\n\nPQ.prototype.socket = function () {\n  return this.$socket();\n}; // return server version number e.g. 90300\n\n\nPQ.prototype.serverVersion = function () {\n  return this.$serverVersion();\n}; //finishes the connection & closes it\n\n\nPQ.prototype.finish = function () {\n  this.connected = false;\n  this.$finish();\n}; ////SYNC executes a plain text query\n//immediately stores the results within the PQ object for consumption with\n//ntuples, getvalue, etc...\n//returns false if there was an error\n//consume additional error details via PQ#errorMessage & friends\n\n\nPQ.prototype.exec = function (commandText) {\n  if (!commandText) {\n    commandText = '';\n  }\n\n  this.$exec(commandText);\n}; //SYNC executes a query with parameters\n//immediately stores the results within the PQ object for consumption with\n//ntuples, getvalue, etc...\n//returns false if there was an error\n//consume additional error details via PQ#errorMessage & friends\n\n\nPQ.prototype.execParams = function (commandText, parameters) {\n  if (!commandText) {\n    commandText = '';\n  }\n\n  if (!parameters) {\n    parameters = [];\n  }\n\n  this.$execParams(commandText, parameters);\n}; //SYNC prepares a named query and stores the result\n//immediately stores the results within the PQ object for consumption with\n//ntuples, getvalue, etc...\n//returns false if there was an error\n//consume additional error details via PQ#errorMessage & friends\n\n\nPQ.prototype.prepare = function (statementName, commandText, nParams) {\n  assert.equal(arguments.length, 3, 'Must supply 3 arguments');\n\n  if (!statementName) {\n    statementName = '';\n  }\n\n  if (!commandText) {\n    commandText = '';\n  }\n\n  nParams = Number(nParams) || 0;\n  this.$prepare(statementName, commandText, nParams);\n}; //SYNC executes a named, prepared query and stores the result\n//immediately stores the results within the PQ object for consumption with\n//ntuples, getvalue, etc...\n//returns false if there was an error\n//consume additional error details via PQ#errorMessage & friends\n\n\nPQ.prototype.execPrepared = function (statementName, parameters) {\n  if (!statementName) {\n    statementName = '';\n  }\n\n  if (!parameters) {\n    parameters = [];\n  }\n\n  this.$execPrepared(statementName, parameters);\n}; //send a command to begin executing a query in async mode\n//returns true if sent, or false if there was a send failure\n\n\nPQ.prototype.sendQuery = function (commandText) {\n  if (!commandText) {\n    commandText = '';\n  }\n\n  return this.$sendQuery(commandText);\n}; //send a command to begin executing a query with parameters in async mode\n//returns true if sent, or false if there was a send failure\n\n\nPQ.prototype.sendQueryParams = function (commandText, parameters) {\n  if (!commandText) {\n    commandText = '';\n  }\n\n  if (!parameters) {\n    parameters = [];\n  }\n\n  return this.$sendQueryParams(commandText, parameters);\n}; //send a command to prepare a named query in async mode\n//returns true if sent, or false if there was a send failure\n\n\nPQ.prototype.sendPrepare = function (statementName, commandText, nParams) {\n  assert.equal(arguments.length, 3, 'Must supply 3 arguments');\n\n  if (!statementName) {\n    statementName = '';\n  }\n\n  if (!commandText) {\n    commandText = '';\n  }\n\n  nParams = Number(nParams) || 0;\n  return this.$sendPrepare(statementName, commandText, nParams);\n}; //send a command to execute a named query in async mode\n//returns true if sent, or false if there was a send failure\n\n\nPQ.prototype.sendQueryPrepared = function (statementName, parameters) {\n  if (!statementName) {\n    statementName = '';\n  }\n\n  if (!parameters) {\n    parameters = [];\n  }\n\n  return this.$sendQueryPrepared(statementName, parameters);\n}; //'pops' a result out of the buffered\n//response data read during async command execution\n//and stores it on the c/c++ object so you can consume\n//the data from it.  returns true if there was a pending result\n//or false if there was no pending result. if there was no pending result\n//the last found result is not overwritten so you can call getResult as many\n//times as you want, and you'll always have the last available result for consumption\n\n\nPQ.prototype.getResult = function () {\n  return this.$getResult();\n}; //returns a text of the enum associated with the result\n//usually just PGRES_COMMAND_OK or PGRES_FATAL_ERROR\n\n\nPQ.prototype.resultStatus = function () {\n  return this.$resultStatus();\n};\n\nPQ.prototype.resultErrorMessage = function () {\n  return this.$resultErrorMessage();\n};\n\nPQ.prototype.resultErrorFields = function () {\n  return this.$resultErrorFields();\n}; //free the memory associated with a result\n//this is somewhat handled for you within the c/c++ code\n//by never allowing the code to 'leak' a result. still,\n//if you absolutely want to free it yourself, you can use this.\n\n\nPQ.prototype.clear = function () {\n  this.$clear();\n}; //returns the number of tuples (rows) in the result set\n\n\nPQ.prototype.ntuples = function () {\n  return this.$ntuples();\n}; //returns the number of fields (columns) in the result set\n\n\nPQ.prototype.nfields = function () {\n  return this.$nfields();\n}; //returns the name of the field (column) at the given offset\n\n\nPQ.prototype.fname = function (offset) {\n  return this.$fname(offset);\n}; //returns the Oid of the type for the given field\n\n\nPQ.prototype.ftype = function (offset) {\n  return this.$ftype(offset);\n}; //returns a text value at the given row/col\n//if the value is null this still returns empty string\n//so you need to use PQ#getisnull to determine\n\n\nPQ.prototype.getvalue = function (row, col) {\n  return this.$getvalue(row, col);\n}; //returns true/false if the value is null\n\n\nPQ.prototype.getisnull = function (row, col) {\n  return this.$getisnull(row, col);\n}; //returns the status of the command\n\n\nPQ.prototype.cmdStatus = function () {\n  return this.$cmdStatus();\n}; //returns the tuples in the command\n\n\nPQ.prototype.cmdTuples = function () {\n  return this.$cmdTuples();\n}; //starts the 'read ready' libuv socket listener.\n//Once the socket becomes readable, the PQ instance starts\n//emitting 'readable' events.  Similar to how node's readable-stream\n//works except to clear the SELECT() notification you need to call\n//PQ#consumeInput instead of letting node pull the data off the socket\n//http://www.postgresql.org/docs/9.1/static/libpq-async.html\n\n\nPQ.prototype.startReader = function () {\n  assert(this.connected, 'Must be connected to start reader');\n  this.$startRead();\n}; //suspends the libuv socket 'read ready' listener\n\n\nPQ.prototype.stopReader = function () {\n  this.$stopRead();\n};\n\nPQ.prototype.writable = function (cb) {\n  assert(this.connected, 'Must be connected to start writer');\n  this.$startWrite();\n  return this.once('writable', cb);\n}; //returns boolean - false indicates an error condition\n//e.g. a failure to consume input\n\n\nPQ.prototype.consumeInput = function () {\n  return this.$consumeInput();\n}; //returns true if PQ#getResult would cause\n//the process to block waiting on results\n//false indicates PQ#getResult can be called\n//with an assurance of not blocking\n\n\nPQ.prototype.isBusy = function () {\n  return this.$isBusy();\n}; //toggles the socket blocking on outgoing writes\n\n\nPQ.prototype.setNonBlocking = function (truthy) {\n  return this.$setNonBlocking(truthy ? 1 : 0);\n}; //returns true if the connection is non-blocking on writes, otherwise false\n//note: connection is always non-blocking on reads if using the send* methods\n\n\nPQ.prototype.isNonBlocking = function () {\n  return this.$isNonBlocking();\n}; //returns 1 if socket is not write-ready\n//returns 0 if all data flushed to socket\n//returns -1 if there is an error\n\n\nPQ.prototype.flush = function () {\n  return this.$flush();\n}; //escapes a literal and returns the escaped string\n//I'm not 100% sure this doesn't do any I/O...need to check that\n\n\nPQ.prototype.escapeLiteral = function (input) {\n  if (!input) return input;\n  return this.$escapeLiteral(input);\n};\n\nPQ.prototype.escapeIdentifier = function (input) {\n  if (!input) return input;\n  return this.$escapeIdentifier(input);\n}; //Checks for any notifications which may have arrivied\n//and returns them as a javascript object: {relname: 'string', extra: 'string', be_pid: int}\n//if there are no pending notifications this returns undefined\n\n\nPQ.prototype.notifies = function () {\n  return this.$notifies();\n}; //Sends a buffer of binary data to the server\n//returns 1 if the command was sent successfully\n//returns 0 if the command would block (use PQ#writable here if so)\n//returns -1 if there was an error\n\n\nPQ.prototype.putCopyData = function (buffer) {\n  assert(buffer instanceof Buffer);\n  return this.$putCopyData(buffer);\n}; //Sends a command to 'finish' the copy\n//if an error message is passed, it will be sent to the\n//backend and signal a request to cancel the copy in\n//returns 1 if sent succesfully\n//returns 0 if the command would block\n//returns -1 if there was an error\n\n\nPQ.prototype.putCopyEnd = function (errorMessage) {\n  if (errorMessage) {\n    return this.$putCopyEnd(errorMessage);\n  }\n\n  return this.$putCopyEnd();\n}; //Gets a buffer of data from a copy out command\n//if async is passed as true it will not block waiting\n//for the result, otherwise this will BLOCK for a result.\n//returns a buffer if successful\n//returns 0 if copy is still in process (async only)\n//returns -1 if the copy is done\n//returns -2 if there was an error\n\n\nPQ.prototype.getCopyData = function (async) {\n  return this.$getCopyData(!!async);\n};\n\nPQ.prototype.cancel = function () {\n  return this.$cancel();\n};","map":null,"metadata":{},"sourceType":"script"}
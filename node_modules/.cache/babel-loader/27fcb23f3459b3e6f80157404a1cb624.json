{"ast":null,"code":"'use strict';\n/**\n * Copyright (c) 2010-2017 Brian Carlson (brian.m.carlson@gmail.com)\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * README.md file in the root directory of this source tree.\n */\n\nvar net = require('net');\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar util = require('util');\n\nvar Writer = require('buffer-writer');\n\nvar Reader = require('packet-reader');\n\nvar TEXT_MODE = 0;\nvar BINARY_MODE = 1;\n\nvar Connection = function (config) {\n  EventEmitter.call(this);\n  config = config || {};\n  this.stream = config.stream || new net.Socket();\n  this._keepAlive = config.keepAlive;\n  this._keepAliveInitialDelayMillis = config.keepAliveInitialDelayMillis;\n  this.lastBuffer = false;\n  this.lastOffset = 0;\n  this.buffer = null;\n  this.offset = null;\n  this.encoding = config.encoding || 'utf8';\n  this.parsedStatements = {};\n  this.writer = new Writer();\n  this.ssl = config.ssl || false;\n  this._ending = false;\n  this._mode = TEXT_MODE;\n  this._emitMessage = false;\n  this._reader = new Reader({\n    headerSize: 1,\n    lengthPadding: -4\n  });\n  var self = this;\n  this.on('newListener', function (eventName) {\n    if (eventName === 'message') {\n      self._emitMessage = true;\n    }\n  });\n};\n\nutil.inherits(Connection, EventEmitter);\n\nConnection.prototype.connect = function (port, host) {\n  var self = this;\n\n  if (this.stream.readyState === 'closed') {\n    this.stream.connect(port, host);\n  } else if (this.stream.readyState === 'open') {\n    this.emit('connect');\n  }\n\n  this.stream.on('connect', function () {\n    if (self._keepAlive) {\n      self.stream.setKeepAlive(true, self._keepAliveInitialDelayMillis);\n    }\n\n    self.emit('connect');\n  });\n\n  const reportStreamError = function (error) {\n    // don't raise ECONNRESET errors - they can & should be ignored\n    // during disconnect\n    if (self._ending && error.code === 'ECONNRESET') {\n      return;\n    }\n\n    self.emit('error', error);\n  };\n\n  this.stream.on('error', reportStreamError);\n  this.stream.on('close', function () {\n    self.emit('end');\n  });\n\n  if (!this.ssl) {\n    return this.attachListeners(this.stream);\n  }\n\n  this.stream.once('data', function (buffer) {\n    var responseCode = buffer.toString('utf8');\n\n    switch (responseCode) {\n      case 'N':\n        // Server does not support SSL connections\n        return self.emit('error', new Error('The server does not support SSL connections'));\n\n      case 'S':\n        // Server supports SSL connections, continue with a secure connection\n        break;\n\n      default:\n        // Any other response byte, including 'E' (ErrorResponse) indicating a server error\n        return self.emit('error', new Error('There was an error establishing an SSL connection'));\n    }\n\n    var tls = require('tls');\n\n    self.stream = tls.connect({\n      socket: self.stream,\n      servername: host,\n      checkServerIdentity: self.ssl.checkServerIdentity || tls.checkServerIdentity,\n      rejectUnauthorized: self.ssl.rejectUnauthorized,\n      ca: self.ssl.ca,\n      pfx: self.ssl.pfx,\n      key: self.ssl.key,\n      passphrase: self.ssl.passphrase,\n      cert: self.ssl.cert,\n      secureOptions: self.ssl.secureOptions,\n      NPNProtocols: self.ssl.NPNProtocols\n    });\n    self.attachListeners(self.stream);\n    self.stream.on('error', reportStreamError);\n    self.emit('sslconnect');\n  });\n};\n\nConnection.prototype.attachListeners = function (stream) {\n  var self = this;\n  stream.on('data', function (buff) {\n    self._reader.addChunk(buff);\n\n    var packet = self._reader.read();\n\n    while (packet) {\n      var msg = self.parseMessage(packet);\n      var eventName = msg.name === 'error' ? 'errorMessage' : msg.name;\n\n      if (self._emitMessage) {\n        self.emit('message', msg);\n      }\n\n      self.emit(eventName, msg);\n      packet = self._reader.read();\n    }\n  });\n  stream.on('end', function () {\n    self.emit('end');\n  });\n};\n\nConnection.prototype.requestSsl = function () {\n  var bodyBuffer = this.writer.addInt16(0x04D2).addInt16(0x162F).flush();\n  var length = bodyBuffer.length + 4;\n  var buffer = new Writer().addInt32(length).add(bodyBuffer).join();\n  this.stream.write(buffer);\n};\n\nConnection.prototype.startup = function (config) {\n  var writer = this.writer.addInt16(3).addInt16(0);\n  Object.keys(config).forEach(function (key) {\n    var val = config[key];\n    writer.addCString(key).addCString(val);\n  });\n  writer.addCString('client_encoding').addCString(\"'utf-8'\");\n  var bodyBuffer = writer.addCString('').flush(); // this message is sent without a code\n\n  var length = bodyBuffer.length + 4;\n  var buffer = new Writer().addInt32(length).add(bodyBuffer).join();\n  this.stream.write(buffer);\n};\n\nConnection.prototype.cancel = function (processID, secretKey) {\n  var bodyBuffer = this.writer.addInt16(1234).addInt16(5678).addInt32(processID).addInt32(secretKey).flush();\n  var length = bodyBuffer.length + 4;\n  var buffer = new Writer().addInt32(length).add(bodyBuffer).join();\n  this.stream.write(buffer);\n};\n\nConnection.prototype.password = function (password) {\n  // 0x70 = 'p'\n  this._send(0x70, this.writer.addCString(password));\n};\n\nConnection.prototype.sendSASLInitialResponseMessage = function (mechanism, initialResponse) {\n  // 0x70 = 'p'\n  this.writer.addCString(mechanism).addInt32(Buffer.byteLength(initialResponse)).addString(initialResponse);\n\n  this._send(0x70);\n};\n\nConnection.prototype.sendSCRAMClientFinalMessage = function (additionalData) {\n  // 0x70 = 'p'\n  this.writer.addString(additionalData);\n\n  this._send(0x70);\n};\n\nConnection.prototype._send = function (code, more) {\n  if (!this.stream.writable) {\n    return false;\n  }\n\n  if (more === true) {\n    this.writer.addHeader(code);\n  } else {\n    return this.stream.write(this.writer.flush(code));\n  }\n};\n\nConnection.prototype.query = function (text) {\n  // 0x51 = Q\n  this.stream.write(this.writer.addCString(text).flush(0x51));\n}; // send parse message\n// \"more\" === true to buffer the message until flush() is called\n\n\nConnection.prototype.parse = function (query, more) {\n  // expect something like this:\n  // { name: 'queryName',\n  //   text: 'select * from blah',\n  //   types: ['int8', 'bool'] }\n  // normalize missing query names to allow for null\n  query.name = query.name || '';\n\n  if (query.name.length > 63) {\n    console.error('Warning! Postgres only supports 63 characters for query names.');\n    console.error('You supplied', query.name, '(', query.name.length, ')');\n    console.error('This can cause conflicts and silent errors executing queries');\n  } // normalize null type array\n\n\n  query.types = query.types || [];\n  var len = query.types.length;\n  var buffer = this.writer.addCString(query.name) // name of query\n  .addCString(query.text) // actual query text\n  .addInt16(len);\n\n  for (var i = 0; i < len; i++) {\n    buffer.addInt32(query.types[i]);\n  }\n\n  var code = 0x50;\n\n  this._send(code, more);\n}; // send bind message\n// \"more\" === true to buffer the message until flush() is called\n\n\nConnection.prototype.bind = function (config, more) {\n  // normalize config\n  config = config || {};\n  config.portal = config.portal || '';\n  config.statement = config.statement || '';\n  config.binary = config.binary || false;\n  var values = config.values || [];\n  var len = values.length;\n  var useBinary = false;\n\n  for (var j = 0; j < len; j++) {\n    useBinary |= values[j] instanceof Buffer;\n  }\n\n  var buffer = this.writer.addCString(config.portal).addCString(config.statement);\n\n  if (!useBinary) {\n    buffer.addInt16(0);\n  } else {\n    buffer.addInt16(len);\n\n    for (j = 0; j < len; j++) {\n      buffer.addInt16(values[j] instanceof Buffer);\n    }\n  }\n\n  buffer.addInt16(len);\n\n  for (var i = 0; i < len; i++) {\n    var val = values[i];\n\n    if (val === null || typeof val === 'undefined') {\n      buffer.addInt32(-1);\n    } else if (val instanceof Buffer) {\n      buffer.addInt32(val.length);\n      buffer.add(val);\n    } else {\n      buffer.addInt32(Buffer.byteLength(val));\n      buffer.addString(val);\n    }\n  }\n\n  if (config.binary) {\n    buffer.addInt16(1); // format codes to use binary\n\n    buffer.addInt16(1);\n  } else {\n    buffer.addInt16(0); // format codes to use text\n  } // 0x42 = 'B'\n\n\n  this._send(0x42, more);\n}; // send execute message\n// \"more\" === true to buffer the message until flush() is called\n\n\nConnection.prototype.execute = function (config, more) {\n  config = config || {};\n  config.portal = config.portal || '';\n  config.rows = config.rows || '';\n  this.writer.addCString(config.portal).addInt32(config.rows); // 0x45 = 'E'\n\n  this._send(0x45, more);\n};\n\nvar emptyBuffer = Buffer.alloc(0);\n\nConnection.prototype.flush = function () {\n  // 0x48 = 'H'\n  this.writer.add(emptyBuffer);\n\n  this._send(0x48);\n};\n\nConnection.prototype.sync = function () {\n  // clear out any pending data in the writer\n  this.writer.flush(0);\n  this.writer.add(emptyBuffer);\n  this._ending = true;\n\n  this._send(0x53);\n};\n\nconst END_BUFFER = Buffer.from([0x58, 0x00, 0x00, 0x00, 0x04]);\n\nConnection.prototype.end = function () {\n  // 0x58 = 'X'\n  this.writer.add(emptyBuffer);\n  this._ending = true;\n  return this.stream.write(END_BUFFER, () => {\n    this.stream.end();\n  });\n};\n\nConnection.prototype.close = function (msg, more) {\n  this.writer.addCString(msg.type + (msg.name || ''));\n\n  this._send(0x43, more);\n};\n\nConnection.prototype.describe = function (msg, more) {\n  this.writer.addCString(msg.type + (msg.name || ''));\n\n  this._send(0x44, more);\n};\n\nConnection.prototype.sendCopyFromChunk = function (chunk) {\n  this.stream.write(this.writer.add(chunk).flush(0x64));\n};\n\nConnection.prototype.endCopyFrom = function () {\n  this.stream.write(this.writer.add(emptyBuffer).flush(0x63));\n};\n\nConnection.prototype.sendCopyFail = function (msg) {\n  // this.stream.write(this.writer.add(emptyBuffer).flush(0x66));\n  this.writer.addCString(msg);\n\n  this._send(0x66);\n};\n\nvar Message = function (name, length) {\n  this.name = name;\n  this.length = length;\n};\n\nConnection.prototype.parseMessage = function (buffer) {\n  this.offset = 0;\n  var length = buffer.length + 4;\n\n  switch (this._reader.header) {\n    case 0x52:\n      // R\n      return this.parseR(buffer, length);\n\n    case 0x53:\n      // S\n      return this.parseS(buffer, length);\n\n    case 0x4b:\n      // K\n      return this.parseK(buffer, length);\n\n    case 0x43:\n      // C\n      return this.parseC(buffer, length);\n\n    case 0x5a:\n      // Z\n      return this.parseZ(buffer, length);\n\n    case 0x54:\n      // T\n      return this.parseT(buffer, length);\n\n    case 0x44:\n      // D\n      return this.parseD(buffer, length);\n\n    case 0x45:\n      // E\n      return this.parseE(buffer, length);\n\n    case 0x4e:\n      // N\n      return this.parseN(buffer, length);\n\n    case 0x31:\n      // 1\n      return new Message('parseComplete', length);\n\n    case 0x32:\n      // 2\n      return new Message('bindComplete', length);\n\n    case 0x33:\n      // 3\n      return new Message('closeComplete', length);\n\n    case 0x41:\n      // A\n      return this.parseA(buffer, length);\n\n    case 0x6e:\n      // n\n      return new Message('noData', length);\n\n    case 0x49:\n      // I\n      return new Message('emptyQuery', length);\n\n    case 0x73:\n      // s\n      return new Message('portalSuspended', length);\n\n    case 0x47:\n      // G\n      return this.parseG(buffer, length);\n\n    case 0x48:\n      // H\n      return this.parseH(buffer, length);\n\n    case 0x57:\n      // W\n      return new Message('replicationStart', length);\n\n    case 0x63:\n      // c\n      return new Message('copyDone', length);\n\n    case 0x64:\n      // d\n      return this.parsed(buffer, length);\n  }\n};\n\nConnection.prototype.parseR = function (buffer, length) {\n  var code = this.parseInt32(buffer);\n  var msg = new Message('authenticationOk', length);\n\n  switch (code) {\n    case 0:\n      // AuthenticationOk\n      return msg;\n\n    case 3:\n      // AuthenticationCleartextPassword\n      if (msg.length === 8) {\n        msg.name = 'authenticationCleartextPassword';\n        return msg;\n      }\n\n      break;\n\n    case 5:\n      // AuthenticationMD5Password\n      if (msg.length === 12) {\n        msg.name = 'authenticationMD5Password';\n        msg.salt = Buffer.alloc(4);\n        buffer.copy(msg.salt, 0, this.offset, this.offset + 4);\n        this.offset += 4;\n        return msg;\n      }\n\n      break;\n\n    case 10:\n      // AuthenticationSASL\n      msg.name = 'authenticationSASL';\n      msg.mechanisms = [];\n\n      do {\n        var mechanism = this.parseCString(buffer);\n\n        if (mechanism) {\n          msg.mechanisms.push(mechanism);\n        }\n      } while (mechanism);\n\n      return msg;\n\n    case 11:\n      // AuthenticationSASLContinue\n      msg.name = 'authenticationSASLContinue';\n      msg.data = this.readString(buffer, length - 4);\n      return msg;\n\n    case 12:\n      // AuthenticationSASLFinal\n      msg.name = 'authenticationSASLFinal';\n      msg.data = this.readString(buffer, length - 4);\n      return msg;\n  }\n\n  throw new Error('Unknown authenticationOk message type' + util.inspect(msg));\n};\n\nConnection.prototype.parseS = function (buffer, length) {\n  var msg = new Message('parameterStatus', length);\n  msg.parameterName = this.parseCString(buffer);\n  msg.parameterValue = this.parseCString(buffer);\n  return msg;\n};\n\nConnection.prototype.parseK = function (buffer, length) {\n  var msg = new Message('backendKeyData', length);\n  msg.processID = this.parseInt32(buffer);\n  msg.secretKey = this.parseInt32(buffer);\n  return msg;\n};\n\nConnection.prototype.parseC = function (buffer, length) {\n  var msg = new Message('commandComplete', length);\n  msg.text = this.parseCString(buffer);\n  return msg;\n};\n\nConnection.prototype.parseZ = function (buffer, length) {\n  var msg = new Message('readyForQuery', length);\n  msg.name = 'readyForQuery';\n  msg.status = this.readString(buffer, 1);\n  return msg;\n};\n\nvar ROW_DESCRIPTION = 'rowDescription';\n\nConnection.prototype.parseT = function (buffer, length) {\n  var msg = new Message(ROW_DESCRIPTION, length);\n  msg.fieldCount = this.parseInt16(buffer);\n  var fields = [];\n\n  for (var i = 0; i < msg.fieldCount; i++) {\n    fields.push(this.parseField(buffer));\n  }\n\n  msg.fields = fields;\n  return msg;\n};\n\nvar Field = function () {\n  this.name = null;\n  this.tableID = null;\n  this.columnID = null;\n  this.dataTypeID = null;\n  this.dataTypeSize = null;\n  this.dataTypeModifier = null;\n  this.format = null;\n};\n\nvar FORMAT_TEXT = 'text';\nvar FORMAT_BINARY = 'binary';\n\nConnection.prototype.parseField = function (buffer) {\n  var field = new Field();\n  field.name = this.parseCString(buffer);\n  field.tableID = this.parseInt32(buffer);\n  field.columnID = this.parseInt16(buffer);\n  field.dataTypeID = this.parseInt32(buffer);\n  field.dataTypeSize = this.parseInt16(buffer);\n  field.dataTypeModifier = this.parseInt32(buffer);\n\n  if (this.parseInt16(buffer) === TEXT_MODE) {\n    this._mode = TEXT_MODE;\n    field.format = FORMAT_TEXT;\n  } else {\n    this._mode = BINARY_MODE;\n    field.format = FORMAT_BINARY;\n  }\n\n  return field;\n};\n\nvar DATA_ROW = 'dataRow';\n\nvar DataRowMessage = function (length, fieldCount) {\n  this.name = DATA_ROW;\n  this.length = length;\n  this.fieldCount = fieldCount;\n  this.fields = [];\n}; // extremely hot-path code\n\n\nConnection.prototype.parseD = function (buffer, length) {\n  var fieldCount = this.parseInt16(buffer);\n  var msg = new DataRowMessage(length, fieldCount);\n\n  for (var i = 0; i < fieldCount; i++) {\n    msg.fields.push(this._readValue(buffer));\n  }\n\n  return msg;\n}; // extremely hot-path code\n\n\nConnection.prototype._readValue = function (buffer) {\n  var length = this.parseInt32(buffer);\n  if (length === -1) return null;\n\n  if (this._mode === TEXT_MODE) {\n    return this.readString(buffer, length);\n  }\n\n  return this.readBytes(buffer, length);\n}; // parses error\n\n\nConnection.prototype.parseE = function (buffer, length) {\n  var fields = {};\n  var msg, item;\n  var input = new Message('error', length);\n  var fieldType = this.readString(buffer, 1);\n\n  while (fieldType !== '\\0') {\n    fields[fieldType] = this.parseCString(buffer);\n    fieldType = this.readString(buffer, 1);\n  }\n\n  if (input.name === 'error') {\n    // the msg is an Error instance\n    msg = new Error(fields.M);\n\n    for (item in input) {\n      // copy input properties to the error\n      if (input.hasOwnProperty(item)) {\n        msg[item] = input[item];\n      }\n    }\n  } else {\n    // the msg is an object literal\n    msg = input;\n    msg.message = fields.M;\n  }\n\n  msg.severity = fields.S;\n  msg.code = fields.C;\n  msg.detail = fields.D;\n  msg.hint = fields.H;\n  msg.position = fields.P;\n  msg.internalPosition = fields.p;\n  msg.internalQuery = fields.q;\n  msg.where = fields.W;\n  msg.schema = fields.s;\n  msg.table = fields.t;\n  msg.column = fields.c;\n  msg.dataType = fields.d;\n  msg.constraint = fields.n;\n  msg.file = fields.F;\n  msg.line = fields.L;\n  msg.routine = fields.R;\n  return msg;\n}; // same thing, different name\n\n\nConnection.prototype.parseN = function (buffer, length) {\n  var msg = this.parseE(buffer, length);\n  msg.name = 'notice';\n  return msg;\n};\n\nConnection.prototype.parseA = function (buffer, length) {\n  var msg = new Message('notification', length);\n  msg.processId = this.parseInt32(buffer);\n  msg.channel = this.parseCString(buffer);\n  msg.payload = this.parseCString(buffer);\n  return msg;\n};\n\nConnection.prototype.parseG = function (buffer, length) {\n  var msg = new Message('copyInResponse', length);\n  return this.parseGH(buffer, msg);\n};\n\nConnection.prototype.parseH = function (buffer, length) {\n  var msg = new Message('copyOutResponse', length);\n  return this.parseGH(buffer, msg);\n};\n\nConnection.prototype.parseGH = function (buffer, msg) {\n  var isBinary = buffer[this.offset] !== 0;\n  this.offset++;\n  msg.binary = isBinary;\n  var columnCount = this.parseInt16(buffer);\n  msg.columnTypes = [];\n\n  for (var i = 0; i < columnCount; i++) {\n    msg.columnTypes.push(this.parseInt16(buffer));\n  }\n\n  return msg;\n};\n\nConnection.prototype.parsed = function (buffer, length) {\n  var msg = new Message('copyData', length);\n  msg.chunk = this.readBytes(buffer, msg.length - 4);\n  return msg;\n};\n\nConnection.prototype.parseInt32 = function (buffer) {\n  var value = buffer.readInt32BE(this.offset);\n  this.offset += 4;\n  return value;\n};\n\nConnection.prototype.parseInt16 = function (buffer) {\n  var value = buffer.readInt16BE(this.offset);\n  this.offset += 2;\n  return value;\n};\n\nConnection.prototype.readString = function (buffer, length) {\n  return buffer.toString(this.encoding, this.offset, this.offset += length);\n};\n\nConnection.prototype.readBytes = function (buffer, length) {\n  return buffer.slice(this.offset, this.offset += length);\n};\n\nConnection.prototype.parseCString = function (buffer) {\n  var start = this.offset;\n  var end = buffer.indexOf(0, start);\n  this.offset = end + 1;\n  return buffer.toString(this.encoding, start, end);\n}; // end parsing methods\n\n\nmodule.exports = Connection;","map":null,"metadata":{},"sourceType":"script"}
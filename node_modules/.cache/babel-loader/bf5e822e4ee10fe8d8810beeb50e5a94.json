{"ast":null,"code":"'use strict';\n/**\n * Copyright (c) 2010-2017 Brian Carlson (brian.m.carlson@gmail.com)\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * README.md file in the root directory of this source tree.\n */\n\nvar dns = require('dns');\n\nvar defaults = require('./defaults');\n\nvar parse = require('pg-connection-string').parse; // parses a connection string\n\n\nvar val = function (key, config, envVar) {\n  if (envVar === undefined) {\n    envVar = process.env['PG' + key.toUpperCase()];\n  } else if (envVar === false) {// do nothing ... use false\n  } else {\n    envVar = process.env[envVar];\n  }\n\n  return config[key] || envVar || defaults[key];\n};\n\nvar useSsl = function () {\n  switch (process.env.PGSSLMODE) {\n    case 'disable':\n      return false;\n\n    case 'prefer':\n    case 'require':\n    case 'verify-ca':\n    case 'verify-full':\n      return true;\n  }\n\n  return defaults.ssl;\n};\n\nvar ConnectionParameters = function (config) {\n  // if a string is passed, it is a raw connection string so we parse it into a config\n  config = typeof config === 'string' ? parse(config) : config || {}; // if the config has a connectionString defined, parse IT into the config we use\n  // this will override other default values with what is stored in connectionString\n\n  if (config.connectionString) {\n    config = Object.assign({}, config, parse(config.connectionString));\n  }\n\n  this.user = val('user', config);\n  this.database = val('database', config);\n  this.port = parseInt(val('port', config), 10);\n  this.host = val('host', config);\n  this.password = val('password', config);\n  this.binary = val('binary', config);\n  this.ssl = typeof config.ssl === 'undefined' ? useSsl() : config.ssl;\n  this.client_encoding = val('client_encoding', config);\n  this.replication = val('replication', config); // a domain socket begins with '/'\n\n  this.isDomainSocket = !(this.host || '').indexOf('/');\n  this.application_name = val('application_name', config, 'PGAPPNAME');\n  this.fallback_application_name = val('fallback_application_name', config, false);\n  this.statement_timeout = val('statement_timeout', config, false);\n  this.query_timeout = val('query_timeout', config, false);\n\n  if (config.connectionTimeoutMillis === undefined) {\n    this.connect_timeout = process.env.PGCONNECT_TIMEOUT || 0;\n  } else {\n    this.connect_timeout = Math.floor(config.connectionTimeoutMillis / 1000);\n  }\n\n  if (config.keepAlive === false) {\n    this.keepalives = 0;\n  } else if (config.keepAlive === true) {\n    this.keepalives = 1;\n  }\n\n  if (typeof config.keepAliveInitialDelayMillis === 'number') {\n    this.keepalives_idle = Math.floor(config.keepAliveInitialDelayMillis / 1000);\n  }\n}; // Convert arg to a string, surround in single quotes, and escape single quotes and backslashes\n\n\nvar quoteParamValue = function (value) {\n  return \"'\" + ('' + value).replace(/\\\\/g, '\\\\\\\\').replace(/'/g, \"\\\\'\") + \"'\";\n};\n\nvar add = function (params, config, paramName) {\n  var value = config[paramName];\n\n  if (value !== undefined && value !== null) {\n    params.push(paramName + '=' + quoteParamValue(value));\n  }\n};\n\nConnectionParameters.prototype.getLibpqConnectionString = function (cb) {\n  var params = [];\n  add(params, this, 'user');\n  add(params, this, 'password');\n  add(params, this, 'port');\n  add(params, this, 'application_name');\n  add(params, this, 'fallback_application_name');\n  add(params, this, 'connect_timeout');\n  var ssl = typeof this.ssl === 'object' ? this.ssl : this.ssl ? {\n    sslmode: this.ssl\n  } : {};\n  add(params, ssl, 'sslmode');\n  add(params, ssl, 'sslca');\n  add(params, ssl, 'sslkey');\n  add(params, ssl, 'sslcert');\n  add(params, ssl, 'sslrootcert');\n\n  if (this.database) {\n    params.push('dbname=' + quoteParamValue(this.database));\n  }\n\n  if (this.replication) {\n    params.push('replication=' + quoteParamValue(this.replication));\n  }\n\n  if (this.host) {\n    params.push('host=' + quoteParamValue(this.host));\n  }\n\n  if (this.isDomainSocket) {\n    return cb(null, params.join(' '));\n  }\n\n  if (this.client_encoding) {\n    params.push('client_encoding=' + quoteParamValue(this.client_encoding));\n  }\n\n  dns.lookup(this.host, function (err, address) {\n    if (err) return cb(err, null);\n    params.push('hostaddr=' + quoteParamValue(address));\n    return cb(null, params.join(' '));\n  });\n};\n\nmodule.exports = ConnectionParameters;","map":null,"metadata":{},"sourceType":"script"}